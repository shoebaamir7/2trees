<?php
/**
 * Implements hook_node_view().
 */
function demo_node_view($node, $view_mode, $langcode)
{
  $node->content['demo_field'] = [
    '#type' => 'markup',
    '#markup' => '<p>'.t('This is demo paragraph tag').'</p>',
    '#weight' => -10
  ];

  $node->content['demo_list'] = [
    '#items' => ['red', 'blue', 'green'],
    '#theme' => 'item_list',
    '#weight' => -9
  ];
  //krumo($node);
}

/**
 * Implements hook_permission()
 * @return array
 */
function demo_permission() {
  return array(
    'administer my module' => array(
      'title' => t('Administer my module'),
      'description' => t('Perform administration tasks for my module.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function demo_form_alter(&$form, &$form_state, $form_id) {
  //krumo($form_id);
  switch ($form_id) {
    case 'user_profile_form' :
      $form['account']['pass']['#description'] = t('Do not use common password like 123456. Added by Aamir Shoeb.');
      break;
  }
}

function demo_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  //krumo($form);
  $form['#validate'][] = 'demo_validate_password';
}

function demo_validate_password(&$form, &$form_state) {
  //$badpassword = ['123','abc'];
  $badpassword = variable_get('demo_badpasswords');
  $badpasswords_array = explode(',', $badpassword);
  if(in_array($form_state['values']['pass'], $badpasswords_array)) {
    form_set_error('pass',t('Please enter strong password'));
  }
  //krumo($form_state);
}

/**
 * Implements hook_menu().
 */
function demo_menu() {
  $item = [];

  $item['admin/config/people/passwords'] = [
    'title' => 'Bad Passwords List',
    'description' => t('List of passwords which are not allowed'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['demo_passwords_form'],
    'access arguments' => ['Administer site configuration'],
    'file' => 'demo_passwords_form.inc'
  ];

  $item['admin/reports/node-list'] = [
    'title' => 'List of nodes',
    'description' => t('List of nodes with publish status'),
    'page callback' => 'demo_node_list',
    'access arguments' => ['Administer content']
  ];

  return $item;
}

function demo_node_list() {
  $items = [];
  $node_types = node_type_get_types();
  $stati = [0,1];

  //loop through variants
  foreach($node_types as $type) {
    $typename = $type->type;
    foreach($stati as $status) {

      //SELECT COUNT FROM node WHERE type = $typename AND status = $status
      $query = db_select('node', 'n')
        ->condition('type', $typename)
        ->condition('status', $status);
      $query->addExpression('COUNT (nid)', 'node_count');
      $results = $query->execute();
      $data = $results->fetchObject();

      //assign vars for printing
      if ($status == 0) {
        $status = 'unpublished';
      }
      else {
        $status = 'published';
      }

      //assemble strings for output
      $items[] = t('The %type content type has %num %status nodes.',
        array(
          '%type'=>$typename,
          '%num'=>$data->node_count,
          '%status'=>$status
        )
      );

    }  //end status loop
  }  //end node type loop

  $content['node-list'] = [
    '#items' => $items,
    '#theme' => 'item_list'
  ];

  return render($content);
}